From: Markus Koschany <apo@debian.org>
Date: Wed, 17 Oct 2018 14:06:28 +0200
Subject: CVE-2018-17961_part2

Bug-Debian: https://bugs.debian.org/910678
Origin: http://git.ghostscript.com/?p=ghostpdl.git;a=commitdiff;h=a6807394bd94b708be24758287b606154daaaed9
---
 Resource/Init/gs_dps1.ps |  2 +-
 psi/interp.c             | 33 +++++++++++++++++++++++++++++++++
 2 files changed, 34 insertions(+), 1 deletion(-)

diff --git a/Resource/Init/gs_dps1.ps b/Resource/Init/gs_dps1.ps
index a57bb94..98feff7 100644
--- Resource/Init/gs_dps1.ps
+++ Resource/Init/gs_dps1.ps
@@ -21,7 +21,7 @@ level2dict begin
 % ------ Virtual memory ------ %
 
 /currentshared /.currentglobal load def
-/scheck /.gcheck load def
+/scheck {.gcheck} bind odef
 %****** FOLLOWING IS WRONG ******
 /shareddict currentdict /globaldict .knownget not { 20 dict } if def
 
diff --git a/psi/interp.c b/psi/interp.c
index 621706a..babd7dd 100644
--- psi/interp.c
+++ psi/interp.c
@@ -666,6 +666,8 @@ again:
     epref = &doref;
     /* Push the error object on the operand stack if appropriate. */
     if (!ERROR_IS_INTERRUPT(code)) {
+        byte buf[260], *bufptr;
+        uint rlen;
         /* Replace the error object if within an oparray or .errorexec. */
         osp++;
         if (osp >= ostop) {
@@ -674,6 +676,37 @@ again:
         }
         *osp = *perror_object;
         errorexec_find(i_ctx_p, osp);
+
+        if (!r_has_type(osp, t_string) && !r_has_type(osp, t_name)) {
+             code = obj_cvs(imemory, osp, buf + 2, 256, &rlen, (const byte **)&bufptr);
+             if (code < 0) {
+                 const char *unknownstr = "--unknown--";
+                 rlen = strlen(unknownstr);
+                 memcpy(buf, unknownstr, rlen);
+                 bufptr = buf;
+             }
+             else {
+                 ref *tobj;
+                 bufptr[rlen] = '\0';
+                 /* Only pass a name object if the operator doesn't exist in systemdict
+                  * i.e. it's an internal operator we have hidden
+                  */
+                 code = dict_find_string(systemdict, (const char *)bufptr, &tobj);
+                 if (code < 0) {
+                     buf[0] = buf[1] = buf[rlen + 2] = buf[rlen + 3] = '-';
+                     rlen += 4;
+                     bufptr = buf;
+                 }
+                 else {
+                     bufptr = NULL;
+                 }
+             }
+             if (bufptr) {
+                 code = name_ref(imemory, buf, rlen, osp, 1);
+                 if (code < 0)
+                     make_null(osp);
+             }
+         }
     }
     goto again;
 }
